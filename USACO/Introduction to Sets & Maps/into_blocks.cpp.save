#include <bits/stdc++.h>

int calculate_complexity(const std::vector<int>& a, int n) {
    std::unordered_map<int, std::pair<int, int>> segments;
    
    std::unordered_map<int, int> freq;

    for (int i = 0; i < n; ++i) {
        int x = a[i];
        if (segments.count(x) == 0) {
            segments[x] = {i, i};
        } else {
            segments[x].second = i;
        }
        freq[x]++;
    }

    int total_changes = 0;
    unordered_map<int, unordered_map<int, int>> block_freq;

    // Проходим по каждому сегменту
    for (const auto& seg : segments) {
        int x = seg.first;
        int l = seg.second.first;
        int r = seg.second.second;

        // Подсчитываем количество элементов в блоке
        unordered_map<int, int> local_freq;
        for (int i = l; i <= r; ++i) {
            local_freq[a[i]]++;
        }

        // Ищем максимальное количество одного элемента в блоке
        int max_occurrences = 0;
        for (const auto& p : local_freq) {
            max_occurrences = max(max_occurrences, p.second);
        }

        // Считаем изменения для данного сегмента (всего элементов минус максимальное количество)
        total_changes += (r - l + 1) - max_occurrences;
    }

    return total_changes;
}

int main() {
    int n, q;
    cin >> n >> q;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    cout << calculate_complexity(a, n) << endl;

    return 0;
}
